<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" 
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
	<display-name>FESDMP</display-name>
	<description>Forest Ecology Station Data Management Platform</description>
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- 多个配置文件使用逗号分隔 -->
	<!--<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/root-context.xml, classpath:spring/applicationContext-security.xml</param-value>
	</context-param>-->
	<!-- 业务层Spring 的配合文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/root-context.xml</param-value>
	</context-param>
	<!-- log4j -->
	<context-param>  
	    <param-name>log4jConfigLocation</param-name>  
	    <param-value>classpath:log4j.properties</param-value>  
	</context-param>  

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- spring 内存监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- Processes application requests -->
	
	<!-- spring securit start 
		Spring Security 实际上是使用多个过滤器形成的链条来工作的。
	
    <filter> 
      <filter-name>springSecurityFilterChain</filter-name> 
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
    </filter> 
    <filter-mapping> 
      <filter-name>springSecurityFilterChain</filter-name> 
      <url-pattern>/*</url-pattern> 
    </filter-mapping> --> 
    <!-- spring securit start --> 
    <!-- org.hibernate.LazyInitializationException -->
    <filter>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<url-pattern>/</url-pattern>
	</filter-mapping>
    
	<!-- 初始化 WebApplicationContext Web 层的Spring 容器作为业务层Spring 容器的子容器 
		因此，Web 层可以引用业务层的Bean。
		WebApplicationContext 发布到ServletContext 的上下文
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>forceEncoding</param-name>
	      <param-value>true</param-value>
	    </init-param>
	</filter>
	  
	<filter-mapping>
	   <filter-name>encodingFilter</filter-name>
	   <url-pattern>/</url-pattern>
	</filter-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	

	
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/view/frame/404.jsp</location>
	</error-page>
	<error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/view/frame/exception.jsp</location>
    </error-page>
    
    
    
	<!-- session outtime 15 min -->
	<!-- <session-config>
		<session-timeout>15</session-timeout>
	</session-config> -->
</web-app>